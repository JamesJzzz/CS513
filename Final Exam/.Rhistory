library(class)
rm(list=ls())
library(ggplot2)
data <- as.data.frame(read.csv("/Users/JamesJz/Documents/Class/CS513/Final Exam/NJ_zip_median_income.csv"))
clusP <- hclust(dist(data[,2:2]), method = 'average')
clusterCut <- cutree(clusP, 3)
plot(clusP)
table(clusterCut,data[,2])
?kmeans
butmedian = as.data.frame(data[,-2])
butpop = as.data.frame(butmedian[,-3])
?table
kmeans_3<- kmeans(butpop,3,nstart = 10)
kmeans_3$cluster
table(kmeans_3$cluster,data$Zip)
table(kmeans_3$cluster,data$Pop)
library(class)
library(neuralnet)
library(nnet)
rm(list=ls())
titanic <- read.csv('/Users/JamesJz/Documents/Class/CS513/Final Exam/Titanic_rows.csv', stringsAsFactors = TRUE)
titanic$iClass= as.integer(as.factor(titanic$Class))
titanic$iSex= as.integer(as.factor(titanic$Sex))
titanic$Age <- ifelse(titanic$Age=="Child", 0, 1)
titanic$iAge= as.integer(as.factor(titanic$Age))
titanic$iSurvived= as.integer(as.factor(titanic$Survived))
View(titanic)
myData = seq(from=1, to=nrow(titanic), by=5)
test<-titanic[myData,]
training<-titanic[-myData,]
ann = neuralnet(iSurvived~ iClass + iSex + iAge, training, hidden=5, threshold=0.1)
plot(ann)
ann_res <- compute(ann, test[, 5:7])
ann2=as.numeric(ann_res$net.result)
ann_round<-round(ann2)
ann_cat<-ifelse(ann2<1.5,1,2)
table(Actual=test$iSurvived,ann_round)
table(Actual=test$iSurvived,ann_cat)
wrong<- (test$iSurvived!=ann_cat)
rate<-sum(wrong)/length(wrong)
rate
library(class)
library(randomForest)
rm(list=ls())
BC <- read.csv("/Users/JamesJz/Desktop/wisc_bc_ContinuousVar.csv")
BC = BC[,-1]
library(class)
library(randomForest)
rm(list=ls())
BC <- read.csv("/Users/JamesJz/Desktop/wisc_bc_ContinuousVar.csv")
BC <- read.csv("/Users/JamesJz/Documents/Class/CS513/Final Exam/wisc_bc_ContinuousVar.csv")
rm(list=ls())
BC <- read.csv("/Users/JamesJz/Documents/Class/CS513/Final Exam/wisc_bc_ContinuousVar.csv")
BC = BC[,-1]
set.seed(321)
myData = seq(from=1, to=nrow(BC), by=5)
test<-BC[myData,]
training<-BC[-myData,]
diaCol = 1
train = as.data.frame(training[,-diaCol])
trainLabels = as.factor(unlist(training[,diaCol]))
testVals = as.data.frame(test[,-diaCol])
testLabels = as.factor(unlist(test[,diaCol]))
fit <- randomForest(train,trainLabels, ntree= 1000)
Prediction <- predict(fit, test)
Prediction
lol = (testLabels != Prediction)
lol
error_rate = sum(lol)/length(lol)
error_rate
table(Prediction=Prediction,Actual=test[,10])
